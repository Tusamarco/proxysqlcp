<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"><xsl:output omit-xml-declaration="yes" method="html" encoding="UTF-8" indent="yes" /><xsl:template name="dataset">  <xsl:variable name="countryname" select="../xml/datasets/country/@name" />  <xsl:variable name="datasetstyle" select="./@style" />  <xsl:variable name="datasetcomment" select="./comment" />	  <xsl:variable name="datasetnote" select="./note" />			<table style='{$datasetstyle}'>		<tr>			<td style='{$datasetstyle}commentheader'>				Comments			</td>			<td colspan="2" style='{$datasetstyle}comment'>				<xsl:value-of select="$datasetcomment"/>			</td>		</tr>					<tr>			<td colspan="3" style='{$datasetstyle}datatable'>				<xsl:call-template name="xml_datasets">				<xsl:with-param name="style" select="$datasetstyle" ></xsl:with-param>								</xsl:call-template>			</td>		</tr>					<tr>			<td style='{$datasetstyle}noteheader'>				Note			</td>			<td colspan="2" style='{$datasetstyle}noter'>				<xsl:value-of select="$datasetnote"/>			</td>		</tr>					</table>  </xsl:template>  <!--xsl:template match="/NCPReport" -->  <xsl:template name="xml_datasets" >  <xsl:param name="style" ></xsl:param>  <xsl:variable name="countryname" select="datasets/country/@name" />				<table style="{$style}">					<tr>						<td style="maincountryname"><xsl:value-of select="$countryname" disable-output-escaping="yes"/></td>					</tr>					<tr>						<td style="maintabletitle"><xsl:value-of select="layer/dataset/@name" disable-output-escaping="yes"/></td>					</tr>					<tr>						<td>						   <xsl:apply-templates select="layer/dataset">		    				   	<xsl:with-param name="style" select="$style" ></xsl:with-param>     				   		  </xsl:apply-templates>						</td>					</tr>				</table>  </xsl:template>	<!-- Template for Country -->  <xsl:template match="country">		<xsl:apply-templates>		</xsl:apply-templates>  </xsl:template><!-- Template for Layer -->  <!--xsl:template match="layer" >		<xsl:apply-templates>		</xsl:apply-templates>  </xsl:template--><!-- Template for the Dataset -->  <xsl:template match="layer/dataset">  <xsl:param name="style" ></xsl:param><!--p> in the datset template </p-->	<xsl:variable name="current_themeid" select="@themeid" />	<xsl:variable name="already_printed_themeid" select="(count(preceding::dataset[@themeid=$current_themeid]) &gt; 0)" />	<xsl:choose>		<xsl:when test="not($already_printed_themeid)" >			<!--BR><p><xsl:value-of select="@name" /> </p></BR-->		</xsl:when>		<xsl:otherwise>		</xsl:otherwise>	</xsl:choose>	<xsl:apply-templates select="region">		<xsl:with-param name="style" select="$style" ></xsl:with-param>	</xsl:apply-templates><!--p> in the dataset template after apply-templates</p-->  </xsl:template><!-- Template for the Region -->  <xsl:template match="region">  <xsl:param name="style" ></xsl:param>    <xsl:variable name="columnscount" select="5" /><!--p> in the Region template </p--><!-- loop for each extent containing the source name -->	<xsl:for-each select="extent[@heading='Source Name']" >	<!-- printing new table header when the source changes -->		<xsl:variable name="current_source" select="@name" />		<xsl:variable name="already_printed_source" select="			count(preceding::region[extent[(@heading='Source Name') and (@name=$current_source)]]) &gt; 0" />		<xsl:choose>			<xsl:when test="not($already_printed_source)" >				<!-- print the source name -->				<table  style="{$style}">					<tr>						<td >							<p/>							<hr noshade="noshade"/>							<p/>						</td>					</tr>					<tr style="{$style}">						<td>							Source Name: <xsl:value-of disable-output-escaping="yes" select="@name" />						</td>					</tr>				</table>				<!-- print the table headers -->				<table style="{$style}">					<xsl:apply-templates select=".">						<xsl:with-param name="print_headers_only">true</xsl:with-param>					</xsl:apply-templates>					<!-- printing the table rows  of the current group of descendant extents (the first one with the current source) -->					<xsl:apply-templates select=".">								<xsl:with-param name="print_headers_only">false</xsl:with-param>					</xsl:apply-templates>					<!-- printing the table rows  of the current group of descendant extents (the first one with the current source) -->					<xsl:for-each select="following::extent[(@heading='Source Name') and (@name=$current_source)]">						<xsl:apply-templates select=".">									<xsl:with-param name="print_headers_only">false</xsl:with-param>						</xsl:apply-templates>					</xsl:for-each>				</table>			</xsl:when>			<xsl:otherwise>			</xsl:otherwise>		</xsl:choose>	</xsl:for-each><!--p> in the Region template after apply-templates</p--> 	<!--tr><td colspan="{$columnscount}" ></td></tr-->  </xsl:template><!-- Template for the Extent with heading = Source -->  <xsl:template match="extent[@heading='Source Name']">	<xsl:param name="print_headers_only" /><!--print_headers_only = <xsl:value-of select="$print_headers_only" /-->	<xsl:choose>		<xsl:when test="$print_headers_only='true'" >			<tr style="trdatasetheaders">				<td style="tddatasetheader">Region</td>				<td style="tddatasetheader">Layer</td>				<xsl:for-each select="descendant::extent" >					<xsl:choose>						<xsl:when test="@heading = 'Indicator'" >							<td style="tddatasetheader">								<xsl:value-of disable-output-escaping="no" select="@name" />\							</td>						</xsl:when>						<xsl:otherwise>							<td style="tddatasetheader">								<xsl:value-of disable-output-escaping="no" select="@heading" />							</td>							<xsl:if test="extent/year/@sample_size">								<td style="tddatasetheader">Sample Size</td>							</xsl:if>						</xsl:otherwise>					</xsl:choose>				</xsl:for-each>			</tr>		</xsl:when>		<xsl:otherwise><!-- print a new table row for each extent having the "indicator"  extents as children (usually axis=6) -->			<xsl:for-each select="descendant::extent[extent[@heading = 'Indicator']]" >				<tr style="trdatasetdata">					<td style="tddatasetdata">						<xsl:value-of disable-output-escaping="yes" select="ancestor::region/@name" />					</td>					<td style="tddatasetdata">						<xsl:value-of disable-output-escaping="yes" select="ancestor::region/@layername" />					</td>	<!-- print the axis columns before the indicators values -->					<xsl:variable name='current_axis' select="number(@axis)" />					<xsl:for-each select="ancestor::extent[(@heading != 'Source Name') and (number(@axis) &lt; $current_axis)]" >						<td style="tddatasetdata">							<xsl:value-of disable-output-escaping="yes" select="@name" />						</td>					</xsl:for-each>					<td style="tddatasetdata">						<xsl:value-of disable-output-escaping="yes" select="@name" />					</td>					<td style="tddatasetdata">						<xsl:value-of disable-output-escaping="yes" select="extent/year/@sample_size" />					</td>	<!-- print the axis columns of the indicators values -->					<xsl:for-each select="extent[@heading = 'Indicator']" >						<td style="tddatasetdata">							<xsl:value-of disable-output-escaping="yes" select="year/@value" />						</td>					</xsl:for-each>				</tr>			</xsl:for-each>		 </xsl:otherwise>	</xsl:choose>  </xsl:template></xsl:stylesheet>