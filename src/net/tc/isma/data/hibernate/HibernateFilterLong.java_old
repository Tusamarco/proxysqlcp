package org.fao.faostat.data.hibernate;

import net.sf.hibernate.Session;
import org.apache.commons.logging.*;

import javax.servlet.*;
import javax.servlet.http.*;
import java.io.IOException;
import org.fao.faostat.persister.FaostatPersister;
import org.apache.log4j.Logger;
import org.fao.faostat.*;

/**
 * A servlet filter that disconnects and reconnects a Hibernate Session for each request.
 * <p>
 * Use this filter for the <b>session-per-application-transaction</b> pattern
 * with a <i>Long Session</i>. Don't forget to demarcate application transactions
 * in your code, as described in Hibernate in Action.
 *
 * @see HibernateUtil
 * @author Christian Bauer <christian@hibernate.org>
 */
public class HibernateFilterLong
		implements Filter {

	private static final String HTTPSESSIONKEY = "HibernateSession";
        private static Logger log = FaostatPersister.getLogDataAccess();

	public void init(FilterConfig filterConfig) throws ServletException {
		log.info("Servlet filter init, now disconnecting/reconnecting a Session for each request.");
	}

	public void doFilter(ServletRequest request,
						 ServletResponse response,
						 FilterChain chain)
			throws IOException, ServletException {

		// Try to get a Hibernate Session from the HttpSession
		HttpSession userSession =
				((HttpServletRequest) request).getSession();
		Session hibernateSession =
				(Session) userSession.getAttribute(HTTPSESSIONKEY);

		if (hibernateSession != null)
                        try {
                            HibernateUtil.reconnect(hibernateSession);
                        } catch (IsmaException ex)
                        {
                            log.error(ex);
                        }

		// If there is no Session, the first call to
		// HibernateUtil.beginTransaction in application code will open
		// a new Session for this thread.
		try {
			chain.doFilter(request, response);

			// Commit any pending database transaction.
                        try {
                            HibernateUtil.commitTransaction();
                        } catch (Exception ex1) {
                            log.error(ex1);
                        }

		} finally {
			// TODO: The Session should be closed if a fatal exceptions occurs

			// No matter what happens, disconnect the Session.
                        try {
                            hibernateSession = HibernateUtil.disconnectSession();
                        } catch (IsmaException ex2) {
                            log.error(ex2);
                        }
			// and store it in the users HttpSession
			userSession.setAttribute(HTTPSESSIONKEY, hibernateSession);
		}
	}

	public void destroy() {}

}
